# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_CRED_KEY = read_local_file("BP_CRED_CRED_KEY")


# Credentials
BP_CRED_CRED = basic_cred(
    "core",
    BP_CRED_CRED_KEY,
    name="CRED",
    type="KEY",
    default=True,
    editables={"username": False, "secret": True},
)


OpenshiftC8 = vm_disk_package(
    name="OpenshiftC8",
    description="",
    config={
        "name": "OpenshiftC8",
        "image": {
            "name": "OpenshiftC8",
            "type": "DISK_IMAGE",
            "source": "https://cloud.centos.org/centos/8-stream/x86_64/images/CentOS-Stream-GenericCloud-8-20220125.1.x86_64.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "Openshift-Centos8", "version": "1.0.0"},
        "checksum": {},
    },
)

RHCOS_BOOTSTRAP = vm_disk_package(
    name="RHCOS_BOOTSTRAP",
    description="",
    config={
        "name": "RHCOS_BOOTSTRAP",
        "image": {
            "name": "RHCOS-@@{OPENSHIFT_SUBDOMAIN}@@",
            "type": "ISO_IMAGE",
            "source": "http://@@{PROVISIONING_VM}@@:8080/openshift/rhcos-@@{OPENSHIFT_SUBDOMAIN}@@.iso",
            "architecture": "X86_64",
        },
        "product": {"name": "RHCOS47_BOOTSTRAP", "version": "1.0.0"},
        "checksum": {"algorithm": "", "value": ""},
    },
)


class LBDNS(Service):

    ST = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )


class Installer(Service):

    OCP_STATUS = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __start__():
        """System action for starting an application"""

        CalmTask.Exec.escript(
            name="Show Login Information",
            filename=os.path.join(
                "scripts",
                "Service_Installer_Action___start___Task_ShowLoginInformation.py",
            ),
            target=ref(Installer),
        )

    @action
    def RemoveBootstrapfromLoadBalancer(name="Remove Bootstrap from LoadBalancer"):

        CalmTask.Exec.ssh(
            name="Remove Bootstrap from LoadBalancer",
            filename=os.path.join(
                "scripts",
                "Service_Installer_Action_RemoveBootstrapfromLoadBalancer_Task_RemoveBootstrapfromLoadBalancer.sh",
            ),
            target=ref(Installer),
        )

    @action
    def SaveHAProxyState(name="Save HAProxy State"):

        CalmTask.Exec.ssh(
            name="Save HAProxy State",
            filename=os.path.join(
                "scripts",
                "Service_Installer_Action_SaveHAProxyState_Task_SaveHAProxyState.sh",
            ),
            target=ref(Installer),
        )


class bootstrapcalm_array_indexLBDNSSTResources(AhvVmResources):

    memory = 16
    vCPUs = 4
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.CdRom.Ide.cloneFromVMDiskPackage(RHCOS_BOOTSTRAP, bootable=True),
        AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(100),
    ]
    nics = [AhvVmNic.NormalNic.ingress("@@{subnet_ref.uuid}@@")]


class bootstrapcalm_array_indexLBDNSST(AhvVm):

    name = "bootstrap-@@{calm_array_index}@@-@@{LBDNS.ST}@@"
    resources = bootstrapcalm_array_indexLBDNSSTResources


class BootstrapSubstrate(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = bootstrapcalm_array_indexLBDNSST
    provider_spec_editables = read_spec(
        os.path.join("specs", "BootstrapSubstrate_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="30",
        credential=ref(BP_CRED_CRED),
        editables_list=["retries", "delay_secs"],
    )

    @action
    def __pre_create__():

        CalmTask.SetVariable.escript(
            name="Create Subnetref",
            filename=os.path.join(
                "scripts",
                "Substrate_BootstrapSubstrate_Action___pre_create___Task_CreateSubnetref.py",
            ),
            target=ref(BootstrapSubstrate),
            variables=["subnet_ref"],
        )


class controlplanecalm_array_indexLBDNSSTResources(AhvVmResources):

    memory = 16
    vCPUs = 4
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.CdRom.Ide.cloneFromVMDiskPackage(RHCOS_BOOTSTRAP, bootable=True),
        AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(120),
    ]
    nics = [AhvVmNic.NormalNic.ingress("@@{subnet_ref.uuid}@@")]


class controlplanecalm_array_indexLBDNSST(AhvVm):

    name = "controlplane-@@{calm_array_index}@@-@@{LBDNS.ST}@@"
    resources = controlplanecalm_array_indexLBDNSSTResources


class ControlPlaneSubstrate(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = controlplanecalm_array_indexLBDNSST
    provider_spec_editables = read_spec(
        os.path.join("specs", "ControlPlaneSubstrate_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="30",
        credential=ref(BP_CRED_CRED),
        editables_list=["retries", "delay_secs"],
    )

    @action
    def __pre_create__():

        CalmTask.SetVariable.escript(
            name="Create Subnetref",
            filename=os.path.join(
                "scripts",
                "Substrate_ControlPlaneSubstrate_Action___pre_create___Task_CreateSubnetref.py",
            ),
            target=ref(ControlPlaneSubstrate),
            variables=["subnet_ref"],
        )


class lbdnsOPENSHIFT_SUBDOMAINResources(AhvVmResources):

    memory = 6
    vCPUs = 4
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(OpenshiftC8, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("@@{subnet_ref.uuid}@@",ip_endpoints=["@@{LBDNS_IP}@@"])]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "lbdnsOPENSHIFT_SUBDOMAIN_cloud_init_data.yaml")
    )


class lbdnsOPENSHIFT_SUBDOMAIN(AhvVm):

    name = "lbdns-@@{OPENSHIFT_SUBDOMAIN}@@"
    resources = lbdnsOPENSHIFT_SUBDOMAINResources


class LBDNSSubstrate(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = lbdnsOPENSHIFT_SUBDOMAIN
    provider_spec_editables = read_spec(
        os.path.join("specs", "LBDNSSubstrate_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="30",
        credential=ref(BP_CRED_CRED),
    )

    @action
    def __pre_create__():

        CalmTask.SetVariable.escript(
            name="Create SubnetRef",
            filename=os.path.join(
                "scripts",
                "Substrate_LBDNSSubstrate_Action___pre_create___Task_CreateSubnetRef.py",
            ),
            target=ref(LBDNSSubstrate),
            variables=["subnet_ref"],
        )

    @action
    def __post_delete__():

        CalmTask.Exec.escript(
            name="Remove Image from Image Service",
            filename=os.path.join(
                "scripts",
                "Substrate_LBDNSSubstrate_Action___post_delete___Task_RemoveImagefromImageService.py",
            ),
            target=ref(LBDNSSubstrate),
        )


class InstallerSubstrate(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "InstallerSubstrate_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{LBDNS.address}@@",
        delay_secs="30",
        credential=ref(BP_CRED_CRED),
    )


class computecalm_array_indexLBDNSSTResources(AhvVmResources):

    memory = 16
    vCPUs = 4
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.CdRom.Ide.cloneFromVMDiskPackage(RHCOS_BOOTSTRAP, bootable=True),
        AhvVmDisk.Disk.Scsi.allocateOnStorageContainer(120),
    ]
    nics = [AhvVmNic.NormalNic.ingress("@@{subnet_ref.uuid}@@")]


class computecalm_array_indexLBDNSST(AhvVm):

    name = "compute-@@{calm_array_index}@@-@@{LBDNS.ST}@@"
    resources = computecalm_array_indexLBDNSSTResources


class ComputeSubstrate(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = computecalm_array_indexLBDNSST
    provider_spec_editables = read_spec(
        os.path.join("specs", "ComputeSubstrate_create_spec_editables.yaml")
    )
    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="30",
        credential=ref(BP_CRED_CRED),
        editables_list=["retries", "delay_secs"],
    )

    @action
    def __pre_create__():

        CalmTask.SetVariable.escript(
            name="Create SubnetRef",
            filename=os.path.join(
                "scripts",
                "Substrate_ComputeSubstrate_Action___pre_create___Task_CreateSubnetRef.py",
            ),
            target=ref(ComputeSubstrate),
            variables=["subnet_ref"],
        )


class Bootstrap(Service):

    dependencies = [ref(LBDNS)]

    BOOTSTRAP_STATUS = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    LB_TARGET = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def RegisterBootstrapintoLoadBalancer(name="Register Bootstrap into LoadBalancer"):

        CalmTask.SetVariable.escript(
            name="Get LB Address",
            filename=os.path.join(
                "scripts",
                "Service_Bootstrap_Action_RegisterBootstrapintoLoadBalancer_Task_GetLBAddress.py",
            ),
            target=ref(Bootstrap),
            variables=["LB_TARGET"],
        )
        CalmTask.Exec.ssh(
            name="Register Bootstrap into LoadBalancer",
            filename=os.path.join(
                "scripts",
                "Service_Bootstrap_Action_RegisterBootstrapintoLoadBalancer_Task_RegisterBootstrapintoLoadBalancer.sh",
            ),
            target=ref(Bootstrap),
        )

    @action
    def CreateDNSEntry(name="Create DNS Entry"):

        CalmTask.Exec.ssh(
            name="Create DNS Entry",
            filename=os.path.join(
                "scripts",
                "Service_Bootstrap_Action_CreateDNSEntry_Task_CreateDNSEntry.sh",
            ),
            target=ref(Bootstrap),
        )


class ControlPlane(Service):

    dependencies = [ref(LBDNS)]

    CONTROLPLANE_STATUS = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    LB_TARGET = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        ControlPlane.DeleteDNSEntry(name="Delete DNS Entry")
        ControlPlane.RemoveControlPlaneNodefromLoadBalancer(
            name="Remove ControlPlane node from LoadBalancer"
        )

    @action
    def RegisterControlPlaneNodeintoLoadBalancer(name="Register ControlPlane node into LoadBalancer"):

        CalmTask.SetVariable.escript(
            name="Get LB Address",
            filename=os.path.join(
                "scripts",
                "Service_ControlPlane_Action_RegisterControlPlaneNodeintoLoadBalancer_Task_GetLBAddress.py",
            ),
            target=ref(ControlPlane),
            variables=["LB_TARGET"],
        )
        CalmTask.Exec.ssh(
            name="Register ControlPlane node into LoadBalancer",
            filename=os.path.join(
                "scripts",
                "Service_ControlPlane_Action_RegisterControlPlaneNodeintoLoadBalancer_Task_RegisterControlPlaneNodeintoLoadBalancer.sh",
            ),
            target=ref(ControlPlane),
        )

    @action
    def RemoveControlPlaneNodefromLoadBalancer(name="Remove ControlPlane node from LoadBalancer"):

        CalmTask.Exec.ssh(
            name="Remove ControlPlane node from LoadBalancer",
            filename=os.path.join(
                "scripts",
                "Service_ControlPlane_Action_RemoveControlPlaneNodefromLoadBalancer_Task_RemoveControlPlaneNodefromLoadBalancer.sh",
            ),
            target=ref(ControlPlane),
        )

    @action
    def CreateDNSEntry(name="Create DNS Entry"):

        CalmTask.Exec.ssh(
            name="Create DNS Entry",
            filename=os.path.join(
                "scripts",
                "Service_ControlPlane_Action_CreateDNSEntry_Task_CreateDNSEntry.sh",
            ),
            target=ref(ControlPlane),
        )

    @action
    def DeleteDNSEntry(name="Delete DNS Entry"):

        CalmTask.Exec.ssh(
            name="Delete DNS Entry",
            filename=os.path.join(
                "scripts",
                "Service_ControlPlane_Action_DeleteDNSEntry_Task_DeleteDNSEntry.sh",
            ),
            target=ref(ControlPlane),
        )


class Compute(Service):

    dependencies = [ref(LBDNS)]

    COMPUTE_STATUS = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    LB_TARGET = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        Compute.DeleteDNSEntry(name="Delete DNS Entry")
        Compute.RemoveComputeNodefromLoadBalancer(name="Remove Compute node from LoadBalancer")

    @action
    def RegisterComputeNodeintoLoadBalancer(name="Register Compute node into LoadBalancer"):

        CalmTask.SetVariable.escript(
            name="Get LB Address",
            filename=os.path.join(
                "scripts",
                "Service_Compute_Action_RegisterComputeNodeintoLoadBalancer_Task_GetLBAddress.py",
            ),
            target=ref(Compute),
            variables=["LB_TARGET"],
        )
        CalmTask.Exec.ssh(
            name="Register Compute node into LoadBalancer",
            filename=os.path.join(
                "scripts",
                "Service_Compute_Action_RegisterComputeNodeintoLoadBalancer_Task_RegisterComputeNodeintoLoadBalancer.sh",
            ),
            target=ref(Compute),
        )

    @action
    def RemoveComputeNodefromLoadBalancer(name="Remove Compute node from LoadBalancer"):

        CalmTask.Exec.ssh(
            name="Remove Compute node from LoadBalancer",
            filename=os.path.join(
                "scripts",
                "Service_Compute_Action_RemoveComputeNodefromLoadBalancer_Task_RemoveComputeNodefromLoadBalancer.sh",
            ),
            target=ref(Compute),
        )

    @action
    def CreateDNSEntry(name="Create DNS Entry"):

        CalmTask.Exec.ssh(
            name="Create DNS Entry",
            filename=os.path.join(
                "scripts",
                "Service_Compute_Action_CreateDNSEntry_Task_CreateDNSEntry.sh",
            ),
            target=ref(Compute),
        )

    @action
    def DeleteDNSEntry(name="Delete DNS Entry"):

        CalmTask.Exec.ssh(
            name="Delete DNS Entry",
            filename=os.path.join(
                "scripts",
                "Service_Compute_Action_DeleteDNSEntry_Task_DeleteDNSEntry.sh",
            ),
            target=ref(Compute),
        )


class LBDNSPackage(Package):

    services = [ref(LBDNS)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Provisioning Setup",
            filename=os.path.join(
                "scripts",
                "Package_LBDNSPackage_Action___install___Task_ProvisioningSetup.sh",
            ),
            target=ref(LBDNS),
        )
        CalmTask.Exec.ssh(
            name="Haproxy Setup",
            filename=os.path.join(
                "scripts",
                "Package_LBDNSPackage_Action___install___Task_HaproxySetup.sh",
            ),
            target=ref(LBDNS),
        )
        CalmTask.Exec.ssh(
            name="dnsmasq setup",
            filename=os.path.join(
                "scripts",
                "Package_LBDNSPackage_Action___install___Task_dnsmasqsetup.sh",
            ),
            target=ref(LBDNS),
        )
        CalmTask.SetVariable.escript(
            name="Status",
            filename=os.path.join(
                "scripts", "Package_LBDNSPackage_Action___install___Task_Status.py"
            ),
            target=ref(LBDNS),
            variables=["ST"],
        )


class InstallerPackage(Package):

    services = [ref(Installer)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Prepare Install",
            filename=os.path.join(
                "scripts",
                "Package_InstallerPackage_Action___install___Task_PrepareInstall.sh",
            ),
            cred=ref(BP_CRED_CRED),
            target=ref(Installer),
        )
        CalmTask.Exec.ssh(
            name="Prepare Openshift Install",
            filename=os.path.join(
                "scripts",
                "Package_InstallerPackage_Action___install___Task_PrepareOpenshiftInstall.sh",
            ),
            target=ref(Installer),
        )
        CalmTask.SetVariable.escript(
            name="OCP_STATUS Status",
            filename=os.path.join(
                "scripts",
                "Package_InstallerPackage_Action___install___Task_OCP_STATUSStatus.py",
            ),
            target=ref(Installer),
            variables=["OCP_STATUS"],
        )
        Installer.RemoveBootstrapfromLoadBalancer(
            name="Remove Bootstrap from LoadBalancer"
        )
        CalmTask.Exec.ssh(
            name="AutoAproval CSR",
            filename=os.path.join(
                "scripts",
                "Package_InstallerPackage_Action___install___Task_AutoAprovalCSR.sh",
            ),
            target=ref(Installer),
        )
        CalmTask.Exec.ssh(
            name="Finish Openshift Install",
            filename=os.path.join(
                "scripts",
                "Package_InstallerPackage_Action___install___Task_FinishOpenshiftInstall.sh",
            ),
            target=ref(Installer),
        )
        Installer.SaveHAProxyState(name="Save HAProxy State")


class BootstrapPackage(Package):

    services = [ref(Bootstrap)]

    @action
    def __install__():

        Bootstrap.CreateDNSEntry(name="Create DNS Entry")
        Bootstrap.RegisterBootstrapintoLoadBalancer(
            name="Register Bootstrap into LoadBalancer"
        )
        CalmTask.Exec.ssh(
            name="OS Installation",
            filename=os.path.join(
                "scripts",
                "Package_BootstrapPackage_Action___install___Task_OSInstallation.sh",
            ),
            target=ref(Bootstrap),
        )
        CalmTask.Exec.escript(
            name="Remove ISO Disk",
            filename=os.path.join(
                "scripts",
                "Package_BootstrapPackage_Action___install___Task_RemoveISODisk.py",
            ),
            target=ref(Bootstrap),
        )
        CalmTask.SetVariable.escript(
            name="Status",
            filename=os.path.join(
                "scripts", "Package_BootstrapPackage_Action___install___Task_Status.py"
            ),
            target=ref(Bootstrap),
            variables=["BOOTSTRAP_STATUS"],
        )


class ControlPlanePackage(Package):

    services = [ref(ControlPlane)]

    @action
    def __install__():

        ControlPlane.CreateDNSEntry(name="Create DNS Entry")
        ControlPlane.RegisterControlPlaneNodeintoLoadBalancer(
            name="Register ControlPlane node into LoadBalancer"
        )
        CalmTask.Exec.ssh(
            name="Install RHCOS",
            filename=os.path.join(
                "scripts",
                "Package_ControlPlanePackage_Action___install___Task_InstallRHCOS.sh",
            ),
            target=ref(ControlPlane),
        )
        CalmTask.Exec.escript(
            name="Remove ISO Disk",
            filename=os.path.join(
                "scripts",
                "Package_ControlPlanePackage_Action___install___Task_RemoveISODisk.py",
            ),
            target=ref(ControlPlane),
        )
        CalmTask.SetVariable.escript(
            name="Status",
            filename=os.path.join(
                "scripts",
                "Package_ControlPlanePackage_Action___install___Task_Status.py",
            ),
            target=ref(ControlPlane),
            variables=["CONTROLPLANE_STATUS"],
        )


class ComputePackage(Package):

    services = [ref(Compute)]

    @action
    def __install__():

        Compute.CreateDNSEntry(name="Create DNS Entry")
        Compute.RegisterComputeNodeintoLoadBalancer(name="Register Compute node into LoadBalancer")
        CalmTask.Exec.ssh(
            name="Install RHCOS",
            filename=os.path.join(
                "scripts",
                "Package_ComputePackage_Action___install___Task_InstallRHCOS.sh",
            ),
            target=ref(Compute),
        )
        CalmTask.Exec.escript(
            name="Remove ISO Disk",
            filename=os.path.join(
                "scripts",
                "Package_ComputePackage_Action___install___Task_RemoveISODisk.py",
            ),
            target=ref(Compute),
        )
        CalmTask.SetVariable.escript(
            name="Status",
            filename=os.path.join(
                "scripts", "Package_ComputePackage_Action___install___Task_Status.py"
            ),
            target=ref(Compute),
            variables=["COMPUTE_STATUS"],
        )


class LBDNSDeployment(Deployment):

    name = "LBDNSDeployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(LBDNSPackage)]
    substrate = ref(LBDNSSubstrate)


class InstallerDeployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(InstallerPackage)]
    substrate = ref(InstallerSubstrate)


class BootstrapDeployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(BootstrapPackage)]
    substrate = ref(BootstrapSubstrate)


class ControlPlaneDeployment(Deployment):

    name = "ControlPlaneDeployment"
    min_replicas = "3"
    max_replicas = "3"
    default_replicas = "3"

    packages = [ref(ControlPlanePackage)]
    substrate = ref(ControlPlaneSubstrate)


class ComputeDeployment(Deployment):

    name = "ComputeDeployment"
    min_replicas = "2"
    max_replicas = "99"
    default_replicas = "@@{COMPUTE_NODES}@@"

    packages = [ref(ComputePackage)]
    substrate = ref(ComputeSubstrate)


class ControlPlaneCompute(Profile):

    deployments = [
        BootstrapDeployment,
        ControlPlaneDeployment,
        LBDNSDeployment,
        InstallerDeployment,
        ComputeDeployment,
    ]

    BASE_DOMAIN = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=True, description=""
    )

    OPENSHIFT_SUBDOMAIN = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=True, description=""
    )

    PROVISIONING_VM = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=True, description=""
    )

    MACHINE_NETWORK = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=True, description=""
    )

    KUBECONFIGB64 = CalmVariable.Simple.Secret(
        "",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    KUBEADMINB64 = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=True, description=""
    )

    SUBNET_REF = CalmVariable.Simple(
        "", label="", is_mandatory=True, is_hidden=False, runtime=True, description=""
    )

    COMPUTE_NODES = CalmVariable.Simple(
        "2", label="", is_mandatory=False, is_hidden=False, runtime=True, description=""
    )

    LBDNS_IP = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=True, description=""
    )

    @action
    def DeployCSI(name="Deploy CSI"):

        PE_PW = CalmVariable.Simple.Secret(
            "",
            label="Prism Element user password",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        PE_ADMIN = CalmVariable.Simple(
            "admin",
            label="Prism Element user with admin role",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        PE_IP = CalmVariable.Simple(
            "",
            label="Prism Element VIP address",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Exec.ssh(
            name="Deploy CSI Driver",
            filename=os.path.join(
                "scripts",
                "Profile_ControlPlaneCompute_Action_DeployCSI_Task_DeployCSIDriver.sh",
            ),
            cred=ref(BP_CRED_CRED),
            target=ref(Installer),
        )

    @action
    def EnableImageRegistry(name="Enable Image Registry"):

        DS_IP = CalmVariable.Simple(
            "10.38.15.136",
            label="Prism Element ISCSI Data Services IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        PE_CONTAINER = CalmVariable.Simple(
            "Default",
            label="Prism Element Storage Container",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Exec.ssh(
            name="Enable Image Registry",
            filename=os.path.join(
                "scripts",
                "Profile_ControlPlaneCompute_Action_EnableImageRegistry_Task_EnableImageRegistry.sh",
            ),
            cred=ref(BP_CRED_CRED),
            target=ref(Installer),
        )

    @action
    def ScaleOut(name="Scale Out"):

        SCALEOUT_COMPUTE = CalmVariable.Simple.int(
            "",
            label="Scale out number of Compute nodes",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Number of Compute nodes to add",
        )
        CalmTask.Scaling.scale_out(
            "@@{SCALEOUT_COMPUTE}@@",
            name="Scale Out Compute nodes",
            target=ref(ComputeDeployment),
        )
        Installer.SaveHAProxyState(name="Save HAProxy State")

    @action
    def ScaleIn(name="Scale In"):

        SCALEIN_COMPUTE = CalmVariable.Simple.int(
            "1",
            label="Scale in number of Compute nodes",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Number of Compute nodes to remove",
        )
        CalmTask.Scaling.scale_in(
            "@@{SCALEIN_COMPUTE}@@", name="Scale In", target=ref(ComputeDeployment)
        )
        Installer.SaveHAProxyState(name="Save HAProxy State")


class OCPInstaller(Blueprint):

    services = [Bootstrap, ControlPlane, LBDNS, Installer, Compute]
    packages = [
        BootstrapPackage,
        OpenshiftC8,
        ControlPlanePackage,
        LBDNSPackage,
        RHCOS_BOOTSTRAP,
        InstallerPackage,
        ComputePackage,
    ]
    substrates = [
        BootstrapSubstrate,
        ControlPlaneSubstrate,
        LBDNSSubstrate,
        InstallerSubstrate,
        ComputeSubstrate,
    ]
    profiles = [ControlPlaneCompute]
    credentials = [BP_CRED_CRED]
