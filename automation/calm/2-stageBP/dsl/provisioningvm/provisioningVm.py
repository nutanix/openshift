# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_CRED_KEY = read_local_file("BP_CRED_CRED_KEY")
Service_ProvisioningVM_variable_KUBEADMIN = read_local_file(
    "Service_ProvisioningVM_variable_KUBEADMIN"
)
Service_ProvisioningVM_variable_KUBECONFIG = read_local_file(
    "Service_ProvisioningVM_variable_KUBECONFIG"
)

# Credentials
BP_CRED_CRED = basic_cred(
    "core",
    BP_CRED_CRED_KEY,
    name="CRED",
    type="KEY",
    default=True,
)


Centos8 = vm_disk_package(
    name="Centos8",
    description="",
    config={
        "name": "Centos8",
        "image": {
            "name": "Centos84",
            "type": "DISK_IMAGE",
            "source": "https://cloud.centos.org/centos/8-stream/x86_64/images/CentOS-Stream-GenericCloud-8-20220125.1.x86_64.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "Centos84", "version": "1.0.0"},
        "checksum": {},
    },
)


class ProvisioningVM(Service):

    name = "Provisioning VM"

    blueprint_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    variable_list = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    launch_uuid = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    KUBEADMIN = CalmVariable.Simple.Secret(
        Service_ProvisioningVM_variable_KUBEADMIN,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    KUBECONFIG = CalmVariable.Simple.Secret(
        Service_ProvisioningVM_variable_KUBECONFIG,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )


class Openshiftprovisioningcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(Centos8, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("default", cluster="PE-Cluster")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs",
            "cloud-init.yaml",
        )
    )


class Openshiftprovisioningcalm_array_indexcalm_time(AhvVm):

    name = "Openshift-provisioning-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = Openshiftprovisioningcalm_array_indexcalm_timeResources


class Provisioning_VM(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = Openshiftprovisioningcalm_array_indexcalm_time

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_CRED),
    )


class Setup(Package):

    services = [ref(ProvisioningVM)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Setup",
            filename=os.path.join(
                "scripts", "Package_Setup_Action___install___Task_Setup.sh"
            ),
            cred=ref(BP_CRED_CRED),
            target=ref(ProvisioningVM),
        )


class decb8265_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Setup)]
    substrate = ref(Provisioning_VM)


class Nutanix(Profile):

    deployments = [decb8265_deployment]

    coreos_installer = CalmVariable.Simple(
        "https://mirror.openshift.com/pub/openshift-v4/clients/coreos-installer/latest/coreos-installer",
        label="CoreOS Installer URL",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    openshift_install_linux = CalmVariable.Simple(
        "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-@@{OCP_VERSION}@@/openshift-install-linux.tar.gz",
        label="OpenShift Install Linux URL",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    openshift_client_linux = CalmVariable.Simple(
        "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-@@{OCP_VERSION}@@/openshift-client-linux.tar.gz",
        label="OpenShift Client Linux URL",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    rhcos_live = CalmVariable.Simple(
        "https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/@@{OCP_VERSION}@@/latest/rhcos-live.x86_64.iso",
        label="RHCOS Live ISO URL",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )


    OCP_VERSION = CalmVariable.WithOptions.Predefined(
        options=["4.9","4.8","4.7","4.6" ],
        default="4.9",
        label="OpenShift version",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="OpenShift version: 4.8 and later requires AOS 5.20.2+ or 6.0.1+ || 4.7 and before requires 5.20+ or 5.15.6+",
    )

    @action
    def DeployOCP(name="Deploy OCP"):

        OCP_BP = CalmVariable.Simple(
            "OCP-Installer",
            label="OpenShift installer blueprint name",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="This is the name for the second blueprint which is used for deploying an OpenShift cluster",
        )
        OCP_CLUSTER_HOSTPREFIX = CalmVariable.Simple(
            "23",
            label="OpenShift host pod network prefix",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The subnet prefix length to assign to each individual node. For example, if prefix is set to 23 then each node is assigned a /23 subnet out of the given Kubernetes pod network (format xx)",
        )
        OCP_CLUSTER_NETWORK = CalmVariable.Simple(
            "10.128.0.0/14",
            label="Kubernetes Pod network",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Internal Kubernetes network for Pod objects (format x.x.x.x/x). Make sure this network does not overlap with Service network, or networks in your datacenter",
        )
        OCP_SERVICE_NETWORK = CalmVariable.Simple(
            "172.30.0.0/16",
            label="Kubernetes Service network",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Internal Kubernetes network for Services objects (format x.x.x.x/x). Make sure this network does not overlap with Pod network, or networks in your datacenter",
        )
        OCP_MACHINE_NETWORK = CalmVariable.Simple(
            "10.55.76.0/25",
            label="Virtual machine network subnet",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="This is the network subnet where OpenShift virtual machines will be deployed (format x.x.x.x/x)",
        )
        OCP_SUBDOMAIN = CalmVariable.Simple(
            "ocp1",
            label="OpenShift subdomain name",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="This is a dedicated subdomain for hosting your OpenShift cluster. The zone has to be delegated in your DNS server to the LB_DNS static IP address",
        )
        BASE_DOMAIN = CalmVariable.Simple(
            "ntnxlab.local",
            label="Domain name",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="This is your base DNS main name (format xxx.yyy)",
        )
        OCP_PULL_SECRET = CalmVariable.Simple(
            "",
            label="OpenShift Pull Secret",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Pull secret can be downloaded from https://console.redhat.com/openshift/install/pull-secret (format JSON)",
        )
        COMPUTE_NODES = CalmVariable.Simple(
            "2",
            label="Number of compute nodes",
            regex="^([1-4][0-9]|[2-9])$",
            validate_regex=True,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Must be 2 or more. Control plane only not supported yet.",
        )
        LBDNS_IP = CalmVariable.Simple(
            "",
            label="Load Balancer & DNS static IP",
            regex="^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            validate_regex=True,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Free static IP for the LB_DNS service (format x.x.x.x)",
        )
        CalmTask.Exec.ssh(
            name="Prepare Env",
            filename=os.path.join(
                "scripts", "Profile_Nutanix_Action_DeployOCP_Task_PrepareEnv.sh"
            ),
            cred=ref(BP_CRED_CRED),
            target=ref(ProvisioningVM),
        )
        CalmTask.SetVariable.ssh(
            name="Auth",
            filename=os.path.join(
                "scripts", "Profile_Nutanix_Action_DeployOCP_Task_Auth.sh"
            ),
            cred=ref(BP_CRED_CRED),
            target=ref(ProvisioningVM),
            variables=["KUBECONFIG", "KUBEADMIN"],
        )
        CalmTask.SetVariable.escript(
            name="Fetch BP UUID",
            filename=os.path.join(
                "scripts", "Profile_Nutanix_Action_DeployOCP_Task_FetchBPUUID.py"
            ),
            target=ref(ProvisioningVM),
            variables=["blueprint_uuid"],
        )
        CalmTask.SetVariable.escript(
            name="run Blueprint",
            filename=os.path.join(
                "scripts", "Profile_Nutanix_Action_DeployOCP_Task_runBlueprint.py"
            ),
            target=ref(ProvisioningVM),
            variables=["launch_uuid"],
        )
        CalmTask.Exec.escript(
            name="Monitor BP",
            filename=os.path.join(
                "scripts", "Profile_Nutanix_Action_DeployOCP_Task_MonitorBP.py"
            ),
            target=ref(ProvisioningVM),
        )


class OCPProvisioningVM(Blueprint):

    services = [ProvisioningVM]
    packages = [Setup, Centos8]
    substrates = [Provisioning_VM]
    profiles = [Nutanix]
    credentials = [BP_CRED_CRED]
